########################################  
 
# JDBC Appender 用于将日志内容直接存储进入数据库
 
######################################## 

##log4j.rootLogger = [ level ] , appenderName1, appenderName2, …
##level:是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。
##Log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。  
##通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。
##比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来。    
##appenderName:就是指定日志信息输出到哪个地方。您可以同时指定多个输出目的地。
##例如：log4j.rootLogger＝info,CONSOLE,A1,im,db 配置了4个输出地方 

log4j.rootLogger=DEBUG,DATABASE,stdout,D

##进行数据库连接的配置，log4j是使用jdbc进行连接的
##该封转的类就是log4j包下的 org.apache.log4j.jdbc.JDBCAppender
log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender
log4j.appender.DATABASE.URL=jdbc:mysql://localhost:3306/log4jTest
log4j.appender.DATABASE.driver=com.mysql.jdbc.Driver
log4j.appender.DATABASE.user=root
log4j.appender.DATABASE.password=root
log4j.appender.DATABASE.sql=INSERT INTO operate_log(CLASS,METHOD,CREATE_TIME,LOG_LEVEL,LOG_MSG,USER_ID,USER_TYPE) VALUES ('%C','%M','%d{yyyy-MM-dd HH\:mm\:ss}','%p','%m','1',1)  
log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout
log4j.appender.DATABASE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n
log4j.addivity.org.apache=true

### 输出到控制台 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
##log4j.appender.stdout.layout.ConversionPattern =  %d{ABSOLUTE} %5p %c{1}:%L - %m%n
log4j.appender.stdout.layout.ConversionPattern =  %d{yyyy-MM-dd HH:mm:ss} %5p %c{1}:%L - %m%n

### 输出到日志文件 ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File = logs/error.log 
log4j.appender.D.Append = true
## 输出DEBUG级别以上的日志
log4j.appender.D.Threshold = ERROR 
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n


#  %m 输出代码中指定的消息
#  %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
#  %r 输出自应用启动到输出该log信息耗费的毫秒数 
#  %c 输出所属的类目，通常就是所在类的全名 
#  %t 输出产生该日志事件的线程名 
#  %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n” 
#  %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921 
#  %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
#  %时间  [%线程] %log级别 %完整类名 - %消息 %换行
#  log4j.appender.xxx.layout.ConversionPattern=%d [%t] %-5p %c - %m%n